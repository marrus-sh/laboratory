#  README  #

Welcome to the Laboratory source code!
Laboratory is an open-source, client-side engine for Mastodon written in Literate CoffeeScript.
Its source files are parseable as regular Markdown documents, and this file is in fact part of the Laboratory source!

##  How to Read Laboratory Source Code  ##

Each Laboratory source code file is broadly split up into two parts: the *description*, which describes what the file does and how to use it, and the *implementation*, which actually implements the described algorithms and processes.
The implementation will always be the last section in the document, and it is the one that it is safest to ignore—any important information should have already been covered in the description of what goes on in the file.
However, you can turn to the implementation if you are curious on how specific Laboratory features are actually coded.
(And, of course, if you are a computer, the compiled implementation is the only part of this file you will ever see!)

###  What to read:

If you're looking to use Laboratory in your project, then you should definitely familiarize yourself with the [Events API](API/), as this is the primary means of interfacing with the Laboratory engine.
Each file of the API provides a different module, and you should probably take a look at the descriptions for each.
These will give you an overview of each API component and direct you towards further information.

The [Constructors](Constructors/) documentation provides details on the various data types you might encounter while interacting with Laboratory.
You should turn to these files whenever you are unclear on what specific properties or methods an object provides.

##  Implementation  ##

This file doesn't actually do much, but it's the first thing that our Laboratory script runs.
In case this is a popup generated by an OAuth request, we handle the information quickly now so that the user can proceed uninterrupted.

###  Strict mode:

Laboratory runs in strict mode.

    "use strict"

###  Introduction:

This is the first file in our compiled source, so let's identify ourselves real fast.

    ###

        ............. LABORATORY ..............

        A client-side API for Mastodon, a free,
           open-source social network server
                  - - by Kibigo! - -

            Licensed under the MIT License.
               Source code available at:
        https://github.com/marrus-sh/laboratory

                    Version 0.3.0

    ###

Laboratory uses an [MIT License](../LICENSE.md) because it's designed to be included in other works.
Feel free to make it your own!

###  First steps:

We include an informative url for the `Laboratory` package on `Laboratory.ℹ` and give the version number on `Laboratory.Nº` for intersted parties.
Laboratory follows semantic versioning, which translates into `Nº` as follows: `Major * 100 + Minor + Patch / 100`.
Laboratory thus assures that minor and patch numbers will never exceed `99` (indeed this would be quite excessive!).

    Laboratory =
        ℹ: "https://github.com/marrus-sh/laboratory"
        Nº: 3.0

###  Popup handling:

If this is a popup (`window.opener.Laboratory` exists) and an API redirect (a `code` parameter exists in our query), then we hand our opener our code.

    do ->
        return unless (code = (location.search.match(/code=([^&]*)/) || [])[1]) and Mommy = window.opener.Laboratory
        Mommy.dispatch "LaboratoryAuthorizationGranted", {code}
        return

###  API and exposed properties:

The Laboratory API is available through the `Laboratory` object.

Although Laboratory does not expose its store to outsiders, it does carefully reveal a few key properties.
These are:

- `ready`, which indicates whether `LaboratoryInitializationReady` has fired yet
- `auth`, which gives the `Authorization` object that `Laboratory` is currently using.

For now, we'll keep these properties in the `Exposed` object, and define getters on `Laboratory` for accessing them.

    Exposed =
        ready: no
        auth: null

    (do (prop) -> Object.defineProperty Laboratory, prop, {get: (-> Exposed[prop]), enumerable: yes}) for prop of Exposed

###  `CustomEvent()`:

`CustomEvent()` is required for our event handling.
This is a CoffeeScript re-implementation of the polyfill available on [the MDN](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent).

    do ->
        return if typeof CustomEvent is "function"
        CustomEvent = (event, params) ->
            params = params or {bubbles: no, cancelable: no, detail: undefined}
            e = document.createEvent "CustomEvent"
            e.initCustomEvent event, params.bubbles, params.cancelable, params.detail
            return e
        CustomEvent.prototype = window.Event.prototype
        Object.freeze CustomEvent
        Object.freeze CustomEvent.prototype

###  `serverRequest()`:

`serverRequest()` is a convenience function for dealing with XMLHttpRequest.
We will use it in our handlers to actually send our requests to the API.
It isn't exposed to the window.

    serverRequest = (method, location, data, accessToken, onComplete, onError) ->

####  Creating the request.

This is fairly simple; we just create an XMLHttpRequest.
You can see we set the `Authorization` header using our access token, if one was provided.

        return unless method is "GET" or method is "POST" or method is "DELETE"
        location = String location
        data = Object data
        request = new XMLHttpRequest

####  Setting the contents.

Note that `FormData` isn't supported in IE 9.

        contents = if method is "POST" and FormData? and data instanceof FormData then data else (
            (
                for key, value of data when value?
                    if value instanceof Array then (
                        (encodeURIComponent key) + "[]=" + (encodeURIComponent subvalue) for subvalue in value
                    ).join "&"
                    else (encodeURIComponent key) + "=" + (encodeURIComponent value)
            ).join "&"
        ).replace /%20/g, '+'

####  Opening the request.

If our `method` isn't `"POST"` then we need to append our `contents` to our `location`.

        location += (if (location.indexOf "?") isnt -1 then "&" else "?") + contents unless contents is "" or method is "POST"
        request.open method, location
        request.setRequestHeader "Content-type", "application/x-www-form-urlencoded" if method is "POST" and not (FormData? and contents instanceof FormData)
        request.setRequestHeader "Authorization", "Bearer " + accessToken if accessToken

####  The callback.

This is the function that is called once the request finishes loading.
We will consider a status code in the range `200` to `205` (inclusive) to be a success, and anything else to be an error.
Laboratory doesn't support HTTP status codes like `206 PARTIAL CONTENT`.

>   __Note :__
>   We use numbers instead of the easier-to-read state names because state names are different in IE.
>   However, the standard names are as follows:
>
>   - `XMLHttpRequest.UNSENT` (`0`)
>   - `XMLHttpRequest.OPENED` (`1`)
>   - `XMLHttpRequest.HEADERS_RECEIVED` (`2`)
>   - `XMLHttpRequest.LOADING` (`3`)
>   - `XMLHttpRequest.DONE` (`4`)

        callback = ->
            switch request.readyState
                when 0 then  #  Do nothing
                when 1 then dispatch "LaboratoryRequestOpen", request
                when 2, 3 then dispatch "LaboratoryRequestUpdate", request
                when 4
                    status = request.status
                    response =
                        try if request.responseText then JSON.parse request.responseText else null
                        catch
                            error: "The response could not be parsed."
                    params =
                        status: status
                        url: location
                        prev: (((request.getResponseHeader "Link")?.match /<\s*([^,]*)\s*>\s*;[^,]*[;\s]rel="?prev(?:ious)?"?/) or [])[1]
                        next: (((request.getResponseHeader "Link")?.match /<\s*([^,]*)\s*>\s*;[^,]*[;\s]rel="?next"?/) or [])[1]
                    switch
                        when 200 <= status <= 205
                            if response?.error?
                                onError response, data, params
                                dispatch "LaboratoryRequestError", request
                            else
                                onComplete response, data, params
                                dispatch "LaboratoryRequestComplete", request
                        else
                            onError response, data, params
                            dispatch "LaboratoryRequestError", request
                    request.removeEventListener "readystatechange", callback
            return

####  Sending the request.

We can now add our event listener and send the request.

        request.addEventListener "readystatechange", callback
        if method is "POST" then request.send contents else do request.send

        return
