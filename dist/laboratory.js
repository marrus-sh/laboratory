// Generated by CoffeeScript 1.11.1

/*

    ............. LABORATORY ..............

    A client-side API for Mastodon, a free,
       open-source social network server
              - - by Kibigo! - -

        Licensed under the MIT License.
           Source code available at:
    https://github.com/marrus-sh/laboratory

                Version 0.1.0
 */

(function() {
  var Constructors, Enumerals, Events, Handlers, Laboratory, generateEnumerals, handle, i, len, module, name, ref, run, serverRequest, submodule,
    hasProp = {}.hasOwnProperty,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  (function() {
    var code, codesearch;
    codesearch = location.search.match(/code=([^&]*)/);
    if (codesearch != null) {
      code = codesearch[1];
    }
    if ((code != null) && window.opener.Laboratory) {
      return window.opener.Laboratory.Authorization.Granted({
        window: window,
        code: code
      });
    }
  })();

  Constructors = {};

  (function() {
    var CustomEvent;
    if (typeof CustomEvent === "function") {
      return;
    }
    CustomEvent = function(event, params) {
      var e;
      params = params || {
        bubbles: false,
        cancelable: false,
        detail: void 0
      };
      e = document.createEvent("CustomEvent");
      e.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);
      return e;
    };
    CustomEvent.prototype = window.Event.prototype;
    Object.freeze(CustomEvent);
    return Object.freeze(CustomEvent.prototype);
  })();

  Constructors.Application = function(data) {
    if (!(this && (this instanceof Constructors.Application) && (data != null))) {
      return;
    }
    this.name = data.name;
    this.href = data.website;
    return Object.freeze(this);
  };

  Object.defineProperty(Constructors.Application, "prototype", {
    value: Object.freeze({})
  });

  Constructors.Enumeral = function(value) {
    if (!(this && (this instanceof Constructors.Enumeral))) {
      return;
    }
    if (!isFinite(this.value = Number(value))) {
      this.value = 0;
    }
    return Object.freeze(this);
  };

  Object.defineProperty(Constructors.Enumeral, "prototype", {
    value: Object.freeze({
      toString: function() {
        return "Enumeral(" + this.value + ")";
      },
      toSource: function() {
        return "Enumeral(" + this.value + ")";
      },
      valueOf: function() {
        return this.value;
      }
    })
  });

  Constructors.Follow = function(data, accounts) {
    var follower;
    if (!(this && (this instanceof Constructors.Follow) && (data != null))) {
      return;
    }
    follower = data.account.id;
    this.id = data.id;
    Object.defineProperty(this, "follower", {
      get: function() {
        return accounts[author];
      },
      enumerable: true
    });
    return Object.freeze(this);
  };

  Object.defineProperty(Constructors.Follow, "prototype", {
    value: Object.freeze({})
  });

  Constructors.LaboratoryEvent = function(type, props) {
    if (!(this && (this instanceof Constructors.LaboratoryEvent))) {
      return;
    }
    this.type = String(type);
    this.defaultProps = Object(props);
    Object.defineProperty(this.defaultProps, "_builder", {
      value: this,
      enumerable: true
    });
    Object.freeze(this.defaultProps);
    return Object.freeze(this);
  };

  Object.defineProperty(Constructors.LaboratoryEvent, "prototype", {
    value: Object.freeze({
      "new": function(props) {
        var detail, initial, name, ref;
        if (!(this instanceof Constructors.LaboratoryEvent)) {
          return;
        }
        detail = {};
        ref = this.defaultProps;
        for (name in ref) {
          initial = ref[name];
          Object.defineProperty(detail, name, {
            value: (props != null) && (props[name] != null) && name !== '_builder' ? props[name] : initial,
            enumerable: name !== '_builder'
          });
        }
        return new CustomEvent(this.type, {
          detail: Object.freeze(detail)
        });
      },
      dispatch: function(props, location) {
        if ((location != null ? location.dispatchEvent : void 0) == null) {
          location = document;
        }
        if (!((location.dispatchEvent instanceof Function) && (this instanceof Constructors.LaboratoryEvent))) {
          return;
        }
        location.dispatchEvent(this["new"](props));
      }
    })
  });

  Constructors.MediaAttachment = function(data) {
    if (!(this && (this instanceof Constructors.MediaAttachment) && (data != null))) {
      return;
    }
    this.id = data.id;
    this.href = data.url;
    this.preview = data.preview_url;
    this.type = data.type === "image" ? Enumerals.MediaType.IMAGE : data.type === "video" ? Enumerals.MediaType.VIDEO : Enumerals.MediaType.UNKNOWN;
    return Object.freeze(this);
  };

  Object.defineProperty(Constructors.MediaAttachment, "prototype", {
    value: Object.freeze({})
  });

  Constructors.Mention = function(data, origin) {
    if (!(this && (this instanceof Constructors.Mention) && (data != null))) {
      return;
    }
    this.id = data.id;
    this.href = data.url;
    this.username = data.username;
    this.account = data.acct + ((origin != null) && data.acct.indexOf("@") === -1 ? origin : "");
    this.localAccount = data.acct;
    return Object.freeze(this);
  };

  Object.defineProperty(Constructors.Mention, "prototype", {
    value: Object.freeze({})
  });

  Constructors.Post = function(data, accounts) {
    var item;
    if (!(this && (this instanceof Constructors.Post) && (data != null))) {
      return;
    }
    if (data.status) {
      this.type = Enumerals.PostType.NOTIFICATION;
      this.id = data.id;
      switch (data.type) {
        case "reblog":
          Object.defineProperty(this, "rebloggedBy", {
            get: function() {
              return accounts[data.account.id];
            },
            enumerable: true
          });
          break;
        case "favourite":
          Object.defineProperty(this, "favouritedBy", {
            get: function() {
              return accounts[data.account.id];
            },
            enumerable: true
          });
      }
      data = data.status;
    } else {
      this.type = Enumerals.PostType.STATUS;
      this.id = data.id;
      if (data.reblog) {
        Object.defineProperty(this, "rebloggedBy", {
          get: function() {
            return accounts[data.account.id];
          },
          enumerable: true
        });
        data = data.reblog;
      }
    }
    this.uri = data.uri;
    this.href = data.url;
    Object.defineProperty(this, "author", {
      get: function() {
        return accounts[data.account.id];
      },
      enumerable: true
    });
    this.inReplyTo = data.in_reply_to_id;
    this.content = data.content;
    this.datetime = data.created_at;
    this.reblogCount = data.reblogs_count;
    this.favouriteCount = data.favourites_count;
    this.isReblogged = data.reblogged;
    this.isFavourited = data.favourited;
    this.isNSFW = data.sensitive;
    this.message = data.spoiler_text;
    this.visibility = {
      "private": Enumerals.Visibility.PRIVATE,
      unlisted: Enumerals.Visibility.UNLISTED,
      "public": Enumerals.Visibility.PUBLIC
    }[data.visibility] || Enumerals.Visibility.UNLISTED;
    this.mediaAttachments = (function() {
      var i, len, ref, results;
      ref = data.media_attachments;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        item = ref[i];
        results.push(new MediaAttachment(item));
      }
      return results;
    })();
    this.application = new Application(data.application);
    return Object.freeze(this);
  };

  Object.defineProperty(Constructors.Post, "prototype", {
    value: Object.freeze({
      compare: function(other) {
        if (!(other instanceof Constructors.Post)) {
          return false;
        }
        return this.type === other.type && this.id === other.id && this.reblogCount === other.reblogCount && this.favouriteCount === other.favouriteCount && this.isReblogged === other.isReblogged && this.isFavourited === other.isFavourited;
      }
    })
  });

  Constructors.Profile = function(data, origin, relationship) {
    if (!(this && (this instanceof Constructors.Profile) && (data != null))) {
      return;
    }
    if (data instanceof Constructors.Profile) {
      this.id = data.id, this.username = data.username, this.account = data.account, this.localAccount = data.localAccount, this.displayName = data.displayName, this.bio = data.bio, this.href = data.href, this.avatar = data.avatar, this.header = data.header, this.isLocked = data.isLocked, this.followerCount = data.followerCount, this.followingCount = data.followingCount, this.statusCount = data.statusCount, this.relationship = data.relationship;
    } else {
      this.id = data.id;
      this.username = data.username;
      this.account = data.acct + ((origin != null) && data.acct.indexOf("@") === -1 ? origin : "");
      this.localAccount = data.acct;
      this.displayName = data.display_name;
      this.bio = data.note;
      this.href = data.url;
      this.avatar = data.avatar;
      this.header = data.header;
      this.isLocked = data.locked;
      this.followerCount = data.followers_count;
      this.followingCount = data.following_count;
      this.statusCount = data.statuses_count;
      this.relationship = Enumerals.Relationship.UNKNOWN;
    }
    if (relationship != null) {
      this.relationship = Enumerals.Relationship.byValue(relationship) || this.relationship;
    }
    return Object.freeze(this);
  };

  Object.defineProperty(Constructors.Profile, "prototype", {
    value: Object.freeze({
      compare: function(other) {
        if (!(other instanceof Constructors.Profile)) {
          return false;
        }
        return this.id === other.id && this.relationship === other.relationship && this.followerCount === other.followerCount && this.followingCount === other.followingCount && this.statusCount === other.statusCount && this.bio === other.bio && this.displayName === other.displayName && this.avatar === other.avatar && this.header === other.header && this.isLocked === other.isLocked && this.username === other.username && this.localAccount === other.localAccount && this.account === other.account && this.href === other.href;
      }
    })
  });

  Enumerals = {};

  generateEnumerals = function(data) {
    var byValue, enumeral, type, value;
    type = function(n) {
      return Constructors.Enumeral.call(n);
    };
    type.prototype = Object.create(Constructors.Enumeral.prototype);
    byValue = {};
    for (enumeral in data) {
      if (!hasProp.call(data, enumeral)) continue;
      value = data[enumeral];
      type.enumeral = new type(value);
      byValue[value] = type.enumeral;
    }
    type.fromValue = function(n) {
      return byValue[Number(n)];
    };
    return Object.freeze(type);
  };

  Enumerals.MediaType = generateEnumerals({
    UNKNOWN: 0x00,
    PHOTO: 0x01,
    VIDEO: 0x02
  });

  Enumerals.PostType = generateEnumerals({
    UNKNOWN: 0x00,
    STATUS: 0x01,
    NOTIFICATION: 0x02
  });

  Enumerals.Relationship = generateEnumerals({
    NOT_FOLLOWING: 0x00,
    FOLLOWED_BY: 0x01,
    FOLLOWING: 0x02,
    MUTUALS: 0x03,
    REQUESTED: 0x04,
    REQUESTED_MUTUALS: 0x05,
    BLOCKING: 0x08,
    SELF: 0x10,
    UNKNOWN: 0x20
  });

  Enumerals.Visibility = generateEnumerals({
    PRIVATE: 0x00,
    UNLISTED: 0x01,
    UNREBLOGGABLE: 0x02,
    PUBLIC: 0x03,
    REQUESTED: 0x04,
    REQUESTED_MUTUALS: 0x05,
    BLOCKING: 0x08,
    SELF: 0x10,
    UNKNOWN: 0x20
  });

  Events = {};

  Events.Account = Object.freeze({
    RelationshipsRequested: new Constructors.LaboratoryEvent("LaboratoryAccountRelationshipsRequested", {
      id: null
    }),
    RelationshipsReceived: new Constructors.LaboratoryEvent("LaboratoryAccountRelationshipsReceived", {
      data: null
    }),
    Requested: new Constructors.LaboratoryEvent("LaboratoryAccountRequested", {
      id: null,
      callback: null
    }),
    Received: new Constructors.LaboratoryEvent("LaboratoryAccountReceived", {
      data: null
    }),
    Removed: new Constructors.LaboratoryEvent("LaboratoryAccountRemoved", {
      id: null,
      callback: null
    }),
    Followers: new Constructors.LaboratoryEvent("LaboratoryAccountFollowers", {
      id: null,
      callback: null,
      before: null,
      after: null
    }),
    Following: new Constructors.LaboratoryEvent("LaboratoryAccountFollowing", {
      id: null,
      callback: null,
      before: null,
      after: null
    }),
    Search: new Constructors.LaboratoryEvent("LaboratoryAccountSearch", {
      query: null,
      callback: null,
      limit: null
    }),
    Follow: new Constructors.LaboratoryEvent("LaboratoryAccountFollow", {
      id: null,
      value: true
    }),
    Block: new Constructors.LaboratoryEvent("LaboratoryAccountBlock", {
      id: null,
      value: true
    })
  });

  Events.Authorization = Object.freeze({
    ClientRequested: new Constructors.LaboratoryEvent('LaboratoryAuthorizationClientRequested', {
      url: "/",
      redirect: "",
      name: "Laboratory Web Client"
    }),
    ClientReceived: new Constructors.LaboratoryEvent('LaboratoryAuthorizationClientReceived', {
      data: null,
      params: null
    }),
    Requested: new Constructors.LaboratoryEvent('LaboratoryAuthorizationRequested', {
      url: "/",
      redirect: "",
      name: "Laboratory Web Client"
    }),
    Granted: new Constructors.LaboratoryEvent('LaboratoryAuthorizationGranted', {
      window: null,
      code: null
    }),
    Received: new Constructors.LaboratoryEvent('LaboratoryAuthorizationReceived', {
      data: null
    }),
    Verified: new Constructors.LaboratoryEvent('LaboratoryAuthorizationVerified', {
      data: null
    }),
    Favourites: new Constructors.LaboratoryEvent('LaboratoryAuthorizationFavourites', {
      callback: null,
      before: null,
      after: null
    }),
    Blocks: new Constructors.LaboratoryEvent('LaboratoryAuthorizationBlocks', {
      callback: null,
      before: null,
      after: null
    })
  });

  Events.Composer = Object.freeze({
    UploadRequested: new Constructors.LaboratoryEvent('LaboratoryComposerUploadRequested', {
      file: null
    }),
    UploadReceived: new Constructors.LaboratoryEvent('LaboratoryComposerUploadReceived', {
      data: null
    }),
    ComposerRequested: new Constructors.LaboratoryEvent('LaboratoryComposerRequested', {
      file: null
    }),
    Post: new Constructors.LaboratoryEvent("LaboratoryComposerPost", {
      text: "",
      inReplyTo: null,
      mediaAttachments: null,
      message: null,
      makePublic: false,
      makeListed: false,
      makeNSFW: true
    }),
    Remove: new Constructors.LaboratoryEvent('LaboratoryComposerRemove', {
      callback: null
    })
  });

  Events.Initialization = Object.freeze({
    Loaded: new Constructors.LaboratoryEvent('LaboratoryInitializationLoaded'),
    Ready: new Constructors.LaboratoryEvent('LaboratoryInitializationReady')
  });

  Events.Status = Object.freeze({
    Requested: new Constructors.LaboratoryEvent("LaboratoryStatusRequested", {
      id: null,
      callback: null
    }),
    Received: new Constructors.LaboratoryEvent("LaboratoryStatusReceived", {
      data: null
    }),
    ReblogsRequested: new Constructors.LaboratoryEvent("LaboratoryStatusReblogs", {
      id: null,
      callback: null,
      before: null,
      after: null
    }),
    FavouritesRequested: new Constructors.LaboratoryEvent("LaboratoryStatusFavouritesRequested", {
      id: null,
      callback: null,
      before: null,
      after: null
    }),
    SetReblog: new Constructors.LaboratoryEvent("LaboratoryStatusSetReblog", {
      id: null
    }),
    SetFavourite: new Constructors.LaboratoryEvent("LaboratoryStatusSetFavourite", {
      id: null
    }),
    Deletion: new Constructors.LaboratoryEvent("LaboratoryStatusDeletion", {
      id: null
    })
  });

  Events.Timeline = Object.freeze({
    Requested: new Constructors.LaboratoryEvent('LaboratoryTimelineRequested', {
      name: null,
      callback: null,
      before: null,
      after: null
    }),
    Received: new Constructors.LaboratoryEvent('LaboratoryTimelineReceived', {
      data: null,
      params: null
    }),
    Removed: new Constructors.LaboratoryEvent('LaboratoryTimelineRemoved', {
      name: null,
      callback: null
    })
  });

  Handlers = {};

  handle = function(builder, callback) {
    var typedCallback;
    typedCallback = function(event) {
      if (!((event != null) && (this != null) && event.type === builder.type)) {
        return;
      }
      return callback(event);
    };
    typedCallback.type = builder.type;
    return Object.freeze(typedCallback);
  };

  serverRequest = function(method, location, contents, accessToken, onComplete, params) {
    var callback, request;
    if (!(method === "GET" || method === "POST" || method === "DELETE")) {
      return;
    }
    request = new XMLHttpRequest();
    request.open(method, location);
    if (method === "POST" && !(contents instanceof FormData)) {
      request.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
    } else {
      contents = void 0;
    }
    if (accessToken) {
      request.setRequestHeader("Authorization", "Bearer " + accessToken);
    }
    callback = function() {
      var nextMatches, prevMatches, ref, ref1, ref2;
      prevMatches = (ref = request.getResponseHeader("Link")) != null ? ref.match(/<\s*([^,]*)\s*>\s*;[^,]*[;\s]rel="?prev(?:ious)?"?/) : void 0;
      nextMatches = (ref1 = request.getResponseHeader("Link")) != null ? ref1.match(/<\s*([^,]*)\s*>\s*;[^,]*[;\s]rel="?next"?/) : void 0;
      if (!(request.readyState === XMLHttpRequest.DONE && (200 <= (ref2 = request.status) && ref2 <= 205))) {
        return;
      }
      onComplete({
        params: params,
        data: request.status <= 202 ? JSON.parse(request.responseText) : null,
        prev: prevMatches != null ? prevMatches[1] : null,
        next: nextMatches != null ? nextMatches[1] : null
      });
      return request.removeEventListener("readystatechange", callback, false);
    };
    request.addEventListener("readystatechange", callback, false);
    request.send(contents);
  };

  Handlers.Account = Object.freeze({
    RelationshipsRequested: handle(Events.Account.RelationshipsRequested, function(event) {
      var id;
      if (!isFinite(id = Number(event.detail.id))) {
        return;
      }
      serverRequest("GET", this.auth.api + "/accounts/relationships?id=" + id, null, this.auth.accessToken, Events.Account.RelationshipsReceived);
    }),
    RelationshipsReceived: handle(Events.Account.RelationshipsReceived, function(event) {
      var callback, data, i, id, j, len, len1, ref, relationship, relationships;
      if (!((data = event.detail.data) instanceof Array)) {
        return;
      }
      for (i = 0, len = data.length; i < len; i++) {
        relationships = data[i];
        if (!(isFinite(id = Number(relationships.id)) && (this.accounts[id] != null))) {
          continue;
        }
        relationship = Enumerals.Relationship.byValue(Enumerals.Relationship.FOLLOWED_BY * relationships.followed_by + Enumerals.Relationship.FOLLOWING * relationships.following + Enumerals.Relationship.REQUESTED * relationships.requested + Enumerals.Relationship.BLOCKING * relationships.blocking + Enumerals.Relationship.SELF * (relationships.id === this.auth.me)) || Enumerals.Relationship.UNKNOWN;
        if (this.accounts[id].relationship !== relationship) {
          this.accounts[id] = new Constructors.Profile(this.accounts[id], this.auth.origin, relationship);
          if (this.interfaces.accounts[id] == null) {
            continue;
          }
          ref = this.interfaces.accounts[id];
          for (j = 0, len1 = ref.length; j < len1; j++) {
            callback = ref[j];
            callback(this.accounts[id]);
          }
        }
      }
    }),
    Requested: handle(Events.Account.Requested, function(event) {
      var callback, id;
      if (!isFinite(id = Number(event.detail.id))) {
        return;
      }
      if (typeof (callback = event.detail.callback) !== "function") {
        callback = null;
      }
      if (!(this.interfaces.accounts[id] instanceof Array)) {
        Object.defineProperty(this.interfaces.accounts, id, {
          value: [],
          enumerable: true
        });
      }
      if (!((callback == null) || indexOf.call(this.interfaces.accounts[id], callback) >= 0)) {
        this.interfaces.accounts[id].push(callback);
      }
      if (this.accounts[id] && (callback != null)) {
        callback(this.accounts[id]);
      }
      serverRequest("GET", this.auth.api + "/accounts/" + id, null, this.auth.accessToken, Events.Account.Received);
      LaboratoryAccountRelationshipsRequested({
        id: id
      });
    }),
    Received: handle(Events.Account.Received, function(event) {
      var callback, data, i, id, len, profile, ref;
      if (!((data = event.detail.data) instanceof Object && isFinite(id = Number(data.id)))) {
        return;
      }
      profile = new Constructors.Profile(data);
      if (this.accounts[id] && profile.compare(this.accounts[id])) {
        return;
      }
      this.accounts[id] = profile;
      if (this.interfaces.accounts[id] == null) {
        return;
      }
      ref = this.interfaces.accounts[id];
      for (i = 0, len = ref.length; i < len; i++) {
        callback = ref[i];
        callback(this.accounts[id]);
      }
    }),
    Removed: handle(Events.Account.Removed, function(event) {
      var callback, id, index;
      if (!(isFinite(id = Number(event.detail.id)) && typeof (callback = event.detail.callback) === "function" && this.interfaces.accounts[id] instanceof Array)) {
        return;
      }
      index = 0;
      while (!(this.interfaces.accounts[id][index] === callback || index >= this.interfaces.accounts[id].length)) {
        index++;
      }
      this.interfaces.accounts[id].splice(index, 1);
    }),
    Followers: handle(Events.Account.Followers, function(event) {
      var callback, id, query;
      if (!(isFinite(id = Number(event.detail.id)) && typeof (callback = event.detail.callback) === "function")) {
        return;
      }
      query = "";
      if (isFinite(event.detail.before)) {
        query += "?max_id=" + Number(event.detail.before);
      }
      if (isFinite(event.detail.after)) {
        query += (query ? "&" : "?") + "since_id=" + Number(event.detail.after);
      }
      return serverRequest("GET", this.auth.api + "/accounts/" + id + "/followers" + query, null, this.auth.accessToken, function(response) {
        var data;
        return callback((function() {
          var i, len, ref, results;
          ref = response.data;
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            data = ref[i];
            results.push(Constructors.Profile(data));
          }
          return results;
        })());
      });
    }),
    Following: handle(Events.Account.Following(function(event) {
      var callback, id, query;
      if (!(isFinite(id = Number(event.detail.id)) && typeof (callback = event.detail.callback) === "function")) {
        return;
      }
      query = "";
      if (isFinite(event.detail.before)) {
        query += "?max_id=" + Number(event.detail.before);
      }
      if (isFinite(event.detail.after)) {
        query += (query ? "&" : "?") + "since_id=" + Number(event.detail.after);
      }
      return serverRequest("GET", this.auth.api + "/accounts/" + id + "/following" + query, null, this.auth.accessToken, function(response) {
        var data;
        return callback((function() {
          var i, len, ref, results;
          ref = response.data;
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            data = ref[i];
            results.push(Constructors.Profile(data));
          }
          return results;
        })());
      });
    })),
    Search: handle(Events.Account.Search, function(event) {
      var callback, id, query;
      if (!(isFinite(id = Number(event.detail.id)) && typeof (callback = event.detail.callback) === "function")) {
        return;
      }
      query = "";
      if (event.detail.query) {
        query += "?q=" + event.detail.query;
      }
      if (isFinite(event.detail.limit)) {
        query += (query ? "&" : "?") + "limit=" + Number(event.detail.limit);
      }
      return serverRequest("GET", this.auth.api + "/accounts/" + id + "/search" + query, null, this.auth.accessToken, function(response) {
        var data;
        return callback((function() {
          var i, len, ref, results;
          ref = response.data;
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            data = ref[i];
            results.push(Constructors.Profile(data));
          }
          return results;
        })());
      });
    }),
    Follow: handle(Events.Account.Follow, function(event) {
      var id;
      if (!isFinite(id = Number(event.detail.id))) {
        return;
      }
      return serverRequest("POST", this.auth.api + "/accounts/" + id + (event.detail.value ? "/follow" : "/unfollow"), null, this.auth.accessToken, Events.Account.RelationshipsReceived);
    }),
    Block: handle(Events.Account.Block, function(event) {
      var id;
      if (!isFinite(id = Number(event.detail.id))) {
        return;
      }
      return serverRequest("POST", this.auth.api + "/accounts/" + id + (event.detail.value ? "/block" : "/unblock"), null, this.auth.accessToken, Events.Account.RelationshipsReceived);
    })
  });

  Handlers.Authorization = Object.freeze({
    ClientRequested: handle(Events.Authorization.ClientRequested, function(event) {
      var a, authURL, url;
      a = document.createElement("a");
      a.href = event.detail.url;
      url = a.origin;
      a.href = event.detail.redirect || "";
      authURL = a.href;
      serverRequest("POST", url + "/api/v1/apps", "client_name=" + encodeURIComponent(String(event.detail.name).replace(" ", "+")) + "&redirect_uris=" + encodeURIComponent(authURL) + "&scopes=read+write+follow", null, Events.Authorization.ClientReceived, {
        url: url,
        redirect: authURL
      });
    }),
    ClientReceived: handle(Events.Authorization.ClientReceived, function(event) {
      localStorage.setItem("Laboratory | " + event.detail.params.url, event.detail.params.redirect + " " + event.detail.data.client_id + " " + event.detail.data.client_secret);
      Events.Authorization.Requested({
        url: event.detail.params.url,
        redirect: event.detail.params.redirect
      });
    }),
    Requested: handle(Events.Authorization.Requested, function(event) {
      var a, authURL, clientID, clientSecret, redirect, ref, url;
      a = document.createElement("a");
      a.href = event.detail.url;
      url = a.origin;
      a.href = event.detail.redirect || "";
      authURL = a.href;
      if (localStorage.getItem("Laboratory | " + url)) {
        ref = localStorage.getItem(url).split(" ", 3), redirect = ref[0], clientID = ref[1], clientSecret = ref[2];
      }
      if (!((redirect && (event.detail.redirect == null) || redirect === authURL) && (clientID != null) && (clientSecret != null))) {
        Events.Authorization.ClientRequested({
          url: url,
          name: event.detail.name
        });
        return;
      }
      this.auth.origin = url;
      this.auth.api = this.auth.origin + "/api/v1";
      this.auth.clientID = clientID;
      this.auth.clientSecret = clientSecret;
      this.auth.redirect = authURL;
      window.open(url + "/oauth/authorize?client_id=" + clientID + "&response_type=code&redirect_uri=" + encodeURIComponent(authURL), "LaboratoryOAuth");
    }),
    Granted: handle(Events.Authorization.Granted, function(event) {
      if (!((this.auth.origin != null) && (this.auth.clientID != null) && (this.auth.clientSecret != null) && (this.auth.redirect != null))) {
        return;
      }
      if (event.detail.window != null) {
        event.detail.window.close();
      }
      serverRequest("POST", this.auth.origin + "/oauth/token", "client_id=" + this.auth.clientID + "&client_secret=" + this.auth.clientSecret + "&redirect_uri=" + encodeURIComponent(this.auth.redirect) + "&grant_type=authorization_code&code=" + event.detail.code, null, Events.Authorization.Received);
    }),
    Received: handle(Events.Authorization.Received, function(event) {
      var ref;
      if (!((ref = event.detail.data) != null ? ref.access_token : void 0)) {
        localStorage.setItem("Laboratory | " + this.auth.origin, "");
        Events.Authorization.Requested({
          url: this.auth.origin,
          clientID: this.auth.clientID,
          clientSecret: this.auth.clientSecret
        });
        return;
      }
      this.auth.accessToken = event.detail.data.access_token;
      localStorage.setItem("Laboratory | " + this.auth.origin, this.auth.redirect + " " + this.auth.clientID + " " + this.auth.clientSecret);
      serverRequest("GET", this.auth.api + "/accounts/verify_credentials", null, this.auth.accessToken, Events.Authorization.Verified);
    }),
    Verified: handle(Events.Authorization.Verified, function(event) {
      this.auth.me = Number(event.detail.data.id);
      Events.Account.Received({
        data: event.detail.data
      });
    }),
    Favourites: handle(Events.Authorization.Favourites(function(event) {
      var callback, query;
      if (typeof (callback = event.detail.callback) !== "function") {
        return;
      }
      query = "";
      if (isFinite(event.detail.before)) {
        query += "?max_id=" + Number(event.detail.before);
      }
      if (isFinite(event.detail.after)) {
        query += (query ? "&" : "?") + "since_id=" + Number(event.detail.after);
      }
      return serverRequest("GET", this.auth.api + "/favourites" + query, null, this.auth.accessToken, function(response) {
        var data;
        return callback((function() {
          var i, len, ref, results;
          ref = response.data;
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            data = ref[i];
            results.push(Constructors.Post(data));
          }
          return results;
        })());
      });
    })),
    Blocks: handle(Events.Authorization.Blocks(function(event) {
      var callback, query;
      if (typeof (callback = event.detail.callback) !== "function") {
        return;
      }
      query = "";
      if (isFinite(event.detail.before)) {
        query += "?max_id=" + Number(event.detail.before);
      }
      if (isFinite(event.detail.after)) {
        query += (query ? "&" : "?") + "since_id=" + Number(event.detail.after);
      }
      return serverRequest("GET", this.auth.api + "/blocks" + query, null, this.auth.accessToken, function(response) {
        var data;
        return callback((function() {
          var i, len, ref, results;
          ref = response.data;
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            data = ref[i];
            results.push(Constructors.Profile(data));
          }
          return results;
        })());
      });
    }))
  });

  Handlers.Composer = Object.freeze({
    UploadRequested: handle(Events.Composer.UploadRequested, function(event) {
      var file, form;
      if (!((file = event.detail.file) instanceof File)) {
        return;
      }
      form = new FormData();
      form.append("file", file);
      serverRequest("POST", this.auth.api + "/media", form, this.auth.accessToken, Events.Composer.UploadReceived);
    }),
    UploadReceived: handle(Events.Composer.UploadReceived, function(event) {
      var callback, i, len, ref;
      ref = this.interfaces.composer;
      for (i = 0, len = ref.length; i < len; i++) {
        callback = ref[i];
        callback(new MediaAttachment(event.detail.data));
      }
    }),
    Requested: handle(Events.Composer.Requested, function(event) {
      var callback;
      if (typeof (callback = event.detail.callback) !== "function") {
        callback = null;
      }
      if (!((callback == null) || indexOf.call(this.interfaces.composer, callback) >= 0)) {
        this.interfaces.composer.push(callback);
      }
    }),
    Requested: handle(Events.Composer.Requested, function(event) {
      var attachment, form, i, index, len, ref;
      form = new FormData();
      form.append("status", String(event.detail.text));
      if (isFinite(event.detail.inReplyTo)) {
        form.append("in_reply_to_id", String(Number(event.detail.inReplyTo)));
      }
      if (event.detail.mediaAttachments instanceof Array) {
        ref = event.detail.mediaAttachments;
        for (index = i = 0, len = ref.length; i < len; index = ++i) {
          attachment = ref[index];
          if (isFinite(attachment)) {
            form.append("media_ids[]", String(Number(attachment)));
          }
        }
      }
      if (event.detail.makeNSFW) {
        form.append("sensitive", "true");
      }
      if (event.detail.message) {
        form.append("spoiler_text", String(event.detail.message));
      }
      form.append("visibility", (function() {
        switch (false) {
          case !!event.detail.makePublic:
            return "private";
          case !!event.detail.makeListed:
            return "unlisted";
          default:
            return "public";
        }
      })());
      serverRequest("POST", this.auth.api + "/statuses", form, this.auth.accessToken, Events.Status.Received);
    }),
    Requested: handle(Events.Composer.Requested, function(event) {
      var index;
      index = 0;
      while (!(this.interfaces.composer[index] === callback || index >= this.interfaces.composer.length)) {
        index++;
      }
      this.interfaces.composer.splice(index, 1);
    })
  });

  Handlers.Initialization = Object.freeze({});

  Handlers.Status = Object.freeze({
    Requested: handle(Events.Status.Requested, function(event) {
      var callback, id;
      if (!isFinite(id = Number(event.detail.id))) {
        return;
      }
      if (typeof (callback = event.detail.callback) !== "function") {
        callback = null;
      }
      serverRequest("GET", this.auth.api + "/statuses/" + id, null, this.auth.accessToken, function(response) {
        Events.Status.Received(response);
        if (callback) {
          return callback(Constructors.Post(response.data));
        }
      });
    }),
    Received: handle(Events.Status.Received, function(event) {
      var i, len, name, timeline, timelinesToUpdate;
      timelinesToUpdate = (function() {
        var ref, ref1, results;
        ref = this.timelines;
        results = [];
        for (name in ref) {
          timeline = ref[name];
          if (ref1 = event.detail.data.id, indexOf.call(timeline.postOrder, ref1) >= 0) {
            results.push(name);
          }
        }
        return results;
      }).call(this);
      for (i = 0, len = timelinesToUpdate.length; i < len; i++) {
        name = timelinesToUpdate[i];
        Events.Timeline.Received({
          data: [event.detail.data],
          params: {
            name: name
          }
        });
      }
    }),
    Reblogs: handle(Events.Status.Reblogs, function(event) {
      var callback, id, query;
      if (!(isFinite(id = Number(event.detail.id)) && typeof (callback = event.detail.callback) === "function")) {
        return;
      }
      query = "";
      if (isFinite(event.detail.before)) {
        query += "?max_id=" + Number(event.detail.before);
      }
      if (isFinite(event.detail.after)) {
        query += (query ? "&" : "?") + "since_id=" + Number(event.detail.after);
      }
      return serverRequest("GET", this.auth.api + "/statuses/" + id + "/reblogged_by" + query, null, this.auth.accessToken, function(response) {
        var data;
        return callback((function() {
          var i, len, ref, results;
          ref = response.data;
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            data = ref[i];
            results.push(Constructors.Profile(data));
          }
          return results;
        })());
      });
    }),
    Favourites: handle(Events.Status.Favourites(function(event) {
      var callback, id, query;
      if (!(isFinite(id = Number(event.detail.id)) && typeof (callback = event.detail.callback) === "function")) {
        return;
      }
      query = "";
      if (isFinite(event.detail.before)) {
        query += "?max_id=" + Number(event.detail.before);
      }
      if (isFinite(event.detail.after)) {
        query += (query ? "&" : "?") + "since_id=" + Number(event.detail.after);
      }
      return serverRequest("GET", this.auth.api + "/statuses/" + id + "/favourited_by" + query, null, this.auth.accessToken, function(response) {
        var data;
        return callback((function() {
          var i, len, ref, results;
          ref = response.data;
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            data = ref[i];
            results.push(Constructors.Profile(data));
          }
          return results;
        })());
      });
    })),
    Follow: handle(Events.Status.SetReblog, function(event) {
      var id;
      if (!isFinite(id = Number(event.detail.id))) {
        return;
      }
      return serverRequest("POST", this.auth.api + "/statuses/" + id + (event.detail.value ? "/reblog" : "/unreblog"), null, this.auth.accessToken, Events.Status.Received);
    }),
    SetFavourite: handle(Events.Status.SetFavourite, function(event) {
      var id;
      if (!isFinite(id = Number(event.detail.id))) {
        return;
      }
      return serverRequest("POST", this.auth.api + "/statuses/" + id + (event.detail.value ? "/favourite" : "/unfavourite"), null, this.auth.accessToken, Events.Status.Received);
    }),
    Deletion: handle(Events.Status.Deletion, function(event) {
      var i, id, len, name, results, timeline, timelinesToUpdate;
      if (!isFinite(id = Number(event.detail.id))) {
        return;
      }
      serverRequest("DELETE", this.auth.api + "/statuses/" + id, null, this.auth.accessToken);
      timelinesToUpdate = (function() {
        var ref, results;
        ref = this.timelines;
        results = [];
        for (name in ref) {
          timeline = ref[name];
          if (indexOf.call(timeline.postOrder, id) >= 0) {
            results.push(name);
          }
        }
        return results;
      }).call(this);
      results = [];
      for (i = 0, len = timelinesToUpdate.length; i < len; i++) {
        name = timelinesToUpdate[i];
        results.push(Events.Timeline.Received({
          data: [
            {
              id: id
            }
          ],
          params: {
            name: name
          }
        }));
      }
      return results;
    })
  });

  Handlers.Timeline = Object.freeze({
    Requested: handle(Events.Timeline.Requested, function(event) {
      var callback, name, url;
      if (typeof (callback = event.detail.callback) !== "function") {
        callback = null;
      }
      name = String(event.detail.name);
      url = this.auth.api + (function() {
        switch (false) {
          case name !== "global":
            return "/timelines/public";
          case name !== "community":
            return "/timelines/public?local=true";
          case name !== "home":
            return "/timelines/home";
          case name.substr(0, 8) !== "hashtag/":
            return "/timelines/tag/" + name.substr(8);
          case name.substr(0, 5) !== "user/":
            return "/accounts/" + name.substr(5) + "/statuses";
          case name !== "notifications":
            return "/notifications";
          default:
            return name;
        }
      })();
      if (event.detail.before != null) {
        url += (name !== community ? "?" : "&") + "max_id=" + event.detail.before;
      }
      if (event.detail.since != null) {
        url += (name !== community && (event.detail.before == null) ? "?" : "&") + "since_id=" + event.detail.since;
      }
      if (!(this.interfaces.timelines[name] instanceof Array)) {
        Object.defineProperty(this.interfaces.timelines, name, {
          value: [],
          enumerable: true
        });
      }
      if (event.detail.callback != null) {
        this.interfaces.timelines[name].push(event.detail.callback);
      }
      serverRequest("GET", url, null, this.auth.accessToken, Events.Timeline.Received, {
        name: name
      });
    }),
    Received: handle(Events.Timeline.Received, function(event) {
      var callback, data, i, id, item, j, k, len, len1, len2, name, post, postOrder, posts, receivedAccounts, ref, ref1, ref2, ref3, ref4, ref5, ref6, response;
      name = String(event.detail.params.name);
      if (!((data = event.detail.data) instanceof Array)) {
        return;
      }
      if (!((ref = this.interfaces.timelines[name]) != null ? ref.length : void 0)) {
        return;
      }
      if (!((this.timelines[name] instanceof Object) && (this.timelines[name].posts instanceof Object) && (this.timelines[name].postOrder instanceof Array))) {
        Object.defineProperty(this.timelines, name, {
          value: Object.seal({
            posts: {},
            postOrder: []
          }, {
            enumerable: true
          })
        });
      }
      posts = {};
      postOrder = [];
      receivedAccounts = [];
      for (i = 0, len = data.length; i < len; i++) {
        item = data[i];
        if (!item.id) {
          continue;
        }
        if (item.account == null) {
          posts[id] = null;
          continue;
        }
        if (ref1 = item.id, indexOf.call(postOrder, ref1) < 0) {
          post = item.type === "follow" ? new Follow(item, this.accounts) : new Post(item, this.accounts);
          postOrder.push(item.id);
          posts[item.id] = post;
        }
        if (ref2 = item.account.id, indexOf.call(receivedAccounts, ref2) < 0) {
          receivedAccounts.push(post.account.id);
          Events.Account.Received({
            data: post.account
          });
        }
        if (!((item.status == null) || (ref3 = item.status.account.id, indexOf.call(receivedAccounts, ref3) >= 0))) {
          receivedAccounts.push(item.status.account.id);
          Events.Account.Received({
            data: item.status.account
          });
        }
        if (!((item.reblog == null) || (ref4 = item.reblog.account.id, indexOf.call(receivedAccounts, ref4) >= 0))) {
          receivedAccounts.push(item.reblog.account.id);
          Events.Account.Received({
            data: item.reblog.account
          });
        }
      }
      ref5 = this.timelines[name].postOrder;
      for (j = 0, len1 = ref5.length; j < len1; j++) {
        id = ref5[j];
        if (!(!(id in posts))) {
          continue;
        }
        posts[id] = this.timelines[name].posts[id];
        postOrder.push(id);
      }
      postOrder.sort(function(a, b) {
        return b - a;
      });
      this.timelines[name].postOrder = Object.freeze(postOrder);
      this.timelines[name].posts = Object.freeze(posts);
      response = Object.freeze({
        posts: posts,
        postOrder: postOrder
      });
      ref6 = this.interfaces.timelines[name];
      for (k = 0, len2 = ref6.length; k < len2; k++) {
        callback = ref6[k];
        callback(response);
      }
    }),
    Removed: handle(Events.Timeline.Removed, function(event) {
      var callback, index, name, ref;
      if (!(((ref = this.interfaces.timelines[name = String(event.detail.name)]) != null ? ref.length : void 0) && typeof (callback = event.detail.callback) === "function")) {
        return;
      }
      index = 0;
      while (!(this.interfaces.timelines[name][index] === callback || index >= this.interfaces.timelines[name].length)) {
        index++;
      }
      this.interfaces.timelines[name].splice(index, 1);
      if (!(this.timelines[name] instanceof Object)) {
        return;
      }
      if (!this.interfaces.timelines[name].length) {
        this.timelines[name].posts = Object.freeze({});
        this.timelines[name].postOrder = Object.freeze([]);
      }
    })
  });

  Laboratory = {
    ℹ: "............. LABORATORY ..............\n\nA client-side API for Mastodon, a free,\n   open-source social network server\n          - - by Kibigo! - -\n\n    Licensed under the MIT License.\n       Source code available at:\nhttps://github.com/marrus-sh/laboratory\n\n            Version 0.1.0",
    Nº: 1.0
  };

  ref = [Constructors, Events, Enumerals];
  for (i = 0, len = ref.length; i < len; i++) {
    module = ref[i];
    for (name in module) {
      if (!hasProp.call(module, name)) continue;
      submodule = module[name];
      Object.defineProperty(Laboratory, name, {
        value: submodule,
        enumerable: true
      });
    }
  }

  Object.defineProperty(window, "Laboratory", {
    value: Object.freeze(Laboratory),
    enumerable: true
  });

  Initialization.Loaded.dispatch();

  run = function() {
    var category, handler, object, store;
    store = Object.freeze({
      accounts: {},
      auth: Object.seal({
        accessToken: null,
        api: null,
        clientID: null,
        clientSecret: null,
        me: null,
        origin: null,
        redirect: null
      }),
      interfaces: Object.freeze({
        accounts: {},
        composer: [],
        timelines: {}
      }),
      timelines: {}
    });
    window["🏪"] = store;
    for (category in Handlers) {
      object = Handlers[category];
      for (name in object) {
        handler = object[name];
        document.addEventListener(handler.type, handler.bind(store));
      }
    }
    Initialization.Ready.dispatch();
  };

  if (document.readyState === "complete") {
    run();
  } else {
    window.addEventListener("load", run);
  }

}).call(this);
