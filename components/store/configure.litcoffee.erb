#  `/components/logic/store/configure`  #

This module is used to initialize the Redux store.
Here's what it imports:

- `createStore`, `applyMiddleware`, `compose` are all Redux functions
- `thunk` is used to create a Redux thunk with our loading bar
- `appReducer` is our consolidated reducer
- `loadingBarMiddleware`, `errorsMiddleware`, and `soundsMiddleware` are various middlewares we want to apply to our store
- `Howler` is loaded, just to disable default behaviour on mobile.

    import { createStore, applyMiddleware, compose } from 'redux'
    import thunk from 'redux-thunk'
    import appReducer from '../reducers'
    import loadingBarMiddleware from '../middleware/loading_bar'
    import errorsMiddleware from '../middleware/errors'
    import soundsMiddleware from 'redux-sounds'
    import Howler from 'howler'


`soundsData` contains our "boop" sound.
We have to get it from `/app/assets` so we use ERB's `asset_path`.

    soundsData =
        boop: "<%= asset_path('sounds/boop.mp3') %>"

This module's `default` function simply creates our store and returns it, applying necessary middleware imported above.

    export default (initial_state) -> new Store(initial_state)


    createStore(
        appReducer,
        compose(
            applyMiddleware(thunk, loadingBarMiddleware {promiseTypeSuffixes: ['REQUEST', 'SUCCESS', 'FAIL']}),
            errorsMiddleware(),
            soundsMiddleware(soundsData)
        ),
        window.devToolsExtension ? window.devToolsExtension() : (f) -> f
    )
